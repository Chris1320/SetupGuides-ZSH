#!/usr/bin/env bash

# This installation script will install ZSH and customize it.
# You can find this on https://github.com/SetupGuides/ZSH.
#
# To disable changing the default shell and opening ZSH, run with `--install-only` flag.

name="SetupGuides ZSH"
version=(0 6 0)
title=$(printf "%s v%s.%s.%s" "$name" "${version[@]}")

ohmyzsh_install_script="https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"

powerlevel10k_git_src="https://github.com/romkatv/powerlevel10k.git"
zsh_autosuggestions_git_src="https://github.com/zsh-users/zsh-autosuggestions.git"
zsh_syntax_highlighting_git_src="https://github.com/zsh-users/zsh-syntax-highlighting.git"

ohmyzsh_install_dir="$HOME/.oh-my-zsh"
powerlevel10k_install_dir="${ohmyzsh_install_dir}/custom/themes/powerlevel10k"
zsh_autosuggestions_install_dir="${ohmyzsh_install_dir}/custom/plugins/zsh-autosuggestions"
zsh_syntax_highlighting_install_dir="${ohmyzsh_install_dir}/custom/plugins/zsh-syntax-highlighting"

omz_enabled_plugins=(
    "command-not-found"
    "fd"
    "fzf"
    "python"
    "qrcode"
    "ripgrep"
    "sudo"
    "tmux"
    "wd"
    "zsh-autosuggestions"
    "zsh-interactive-cd"
    "zsh-navigation-tools"
    "zsh-syntax-highlighting"
)
pkgs_to_install=(
    "bat"
    "curl"
    "eza"
    # "fd-find"
    "fd"
    "fzf"
    "git"
    "ripgrep"
    "tealdeer"
    "tmux"
    "wget"
    "zoxide"
    "zsh"
)

# Detect the user's package manager.
if [[ -f "$(command -v pacman)" ]]; then
    package_manager="pacman"
elif [[ -f "$(command -v dnf)" ]]; then
    package_manager="dnf"
elif [[ -f "$(command -v apt)" ]]; then
    package_manager="apt"
else
    echo "[E] Unable to automatically detect your package manager."
    echo "[E] Please consider manually installing the customization instead."
    echo "[E] Exiting..."
    exit 127
fi

echo -e "[i] Detected package manager: ${package_manager}"
echo "$title"
echo

# Check if the script is running as root.
if [[ "$EUID" -eq 0 ]]; then
    echo "This script must not be run as root."
    echo "Run with \`./install\` instead."
    exit 1
fi

# Check if the script is running on Termux.
# $PREFIX is an envvar in Termux that contains the system filepath.
# There is no need for sudo on Termux since we don't need root to install pkgs.
if [[ $PREFIX = *"com.termux"* ]]; then
    sudocmd=""
else
    sudocmd="sudo"
fi

printf "[i] Installing needed packages...\n\n"
if [[ "$package_manager" = "pacman" ]]; then
    pkg_install_cmd="${sudocmd} pacman -Syu --noconfirm ${pkgs_to_install[*]}"
elif [[ "$package_manager" = "dnf" ]]; then
    # NOTE: chsh is not installed by default in Fedora and util-linux-user provides it.
    pkg_install_cmd="${sudocmd} dnf install -y ${pkgs_to_install[*]} util-linux-user"
elif [[ "$package_manager" = "apt" ]]; then
    pkg_install_cmd="${sudocmd} apt update -y && ${sudocmd} apt install -y --upgrade ${pkgs_to_install[*]}"
else
    echo "[E] Unable to automatically detect your package manager."
    echo "    Please consider manually installing the customization instead."
    echo "    Exiting..."
    exit 255
fi

if ! sh -c "$pkg_install_cmd"; then
    echo "[E] Error installing dependencies."
    exit 2
fi

printf "[i] Installing Oh-My-ZSH...\n\n"
if ! ZSH="$ohmyzsh_install_dir" sh -c "$(curl -L "$ohmyzsh_install_script")" "" --unattended; then
    echo "[E] Failed to install Oh-My-ZSH."
    exit 3
fi

printf "[i] Cloning Powerlevel10k theme...\n\n"
if ! git clone --depth=1 "${powerlevel10k_git_src}" "$powerlevel10k_install_dir"; then
    echo "[E] Failed to clone Powerlevel10k theme."
    exit 4
fi

printf "[i] Installing zsh-autosuggestions...\n\n"
if ! git clone --depth=1 "${zsh_autosuggestions_git_src}" "${zsh_autosuggestions_install_dir}"; then
    echo "[E] Failed to install zsh-autosuggestions."
    exit 5
fi

printf "[i] Installing zsh-syntax-highlighting...\n\n"
if ! git clone --depth=1 "$zsh_syntax_highlighting_git_src" "$zsh_syntax_highlighting_install_dir"; then
    echo "[E] Failed to install zsh-syntax-highlighting."
    exit 6
fi

printf "[i] Editing \`.zshrc\`...\n\n"

# Backup the old .zshrc configuration if it exists.
if [[ -f "$HOME/.zshrc" ]]; then
    cp "$HOME/.zshrc" "$HOME/.zshrc.$(date +"%Y-%m-%d_%H-%M-%S").bak"
fi

# Enable plugins and set theme.
sed -i 's/^ZSH_THEME=.*/ZSH_THEME="powerlevel10k\/powerlevel10k"/' "${HOME}/.zshrc"
sed -i "s/^plugins=.*/plugins=(${omz_enabled_plugins[*]})/" "${HOME}/.zshrc"
# shellcheck disable=SC2016
{
    printf 'alias cat="bat"                        # use bat in place to cat\n'
    printf 'alias cd="z"                           # use zoxide in place to cd\n'
    printf 'alias icat="kitten icat"               # use kitty icat module for displaying images in terminal\n'
    printf 'alias ls="eza --icons"                 # use eza in place to ls\n\n'

    printf '# Edit ~/.config/zsh/user_env.sh to add custom environment variables.\n'
    printf 'export LANG=en_US.UTF-8                         # Set language environment variable.\n'
    printf 'export LESS="--no-init --quit-if-one-screen -R" # Causes `less` to just write to stdout if the text can be viewed without scrolling.\n'
    printf 'export GPG_TTY=$TTY                             # Fix GPG "gpg failed to sign data" error.\n'
    printf 'export PATH=$PATH:$HOME/.local/bin              # Add local bin to PATH.\n'
    printf 'export PATH=$PATH:$HOME/.local/appimages        # Add AppImages to PATH.\n'
    printf 'export DOTNET_CLI_TELEMETRY_OPTOUT=true         # Disable .NET CLI telemetry.\n'

    printf '\n# Use zoxide if installed.\n'
    printf 'if command -v zoxide > /dev/null; then eval "$(zoxide init zsh)"; fi\n'
    printf 'source "${HOME}/.config/zsh/user_env.sh"            # Load user environment variables.\n'
} >>"${HOME}/.zshrc"

echo "[i] Creating directories..."
mkdir -p "${HOME}/.local/appimages"
mkdir -p "${HOME}/.local/bin"
mkdir -p "${HOME}/.config/zsh"

echo "[i] Creating files..."
printf '#!/usr/bin/env bash\n\n# Write user configuration here' >"${HOME}/.config/zsh/user_env.sh"

if ! command -v bat >/dev/null && command -v batcat >/dev/null; then
    echo "[i] Creating bat symlink..."
    ln -s "$(command -v batcat)" "${HOME}/.local/bin/bat"
fi

if [[ $1 = "--install-only" ]]; then
    printf "[i] Skipping changing default shell because of \`--install-only\` flag.\n\n"

else
    printf "[i] Changing default shell to zsh...\n\n"
    if [[ $PREFIX = *"com.termux"* ]]; then
        if ! chsh -s zsh; then
            echo "[E] Failed to change default shell."
            exit 6
        fi

    else
        if ! chsh -s "$(command -v zsh)"; then
            echo "[E] Failed to change default shell."
            exit 7
        fi
    fi
fi

echo
if [[ $1 = "--install-only" ]]; then
    echo "[i] ${name} has been installed successfully."
    echo "    Run \`$(command -v zsh)\` to try it out."
    exit 0

else
    exec zsh -l && exit 0 # Run ZSH.

fi
